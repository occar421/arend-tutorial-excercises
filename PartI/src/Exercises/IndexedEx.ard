\import Indexed

-- 1. Implement the function 'lookup', which takes a list and a natural number n and returns the n-th element in the list.
--    Note that it is impossible to define such a function without restrictions on n sice n can be greater than the size of the list.
--    Therefore the function should also take a proof that n is in the right range: T (n < length xs).

\func lookup {A : \Type} (xs : List A) (n : Nat) (p : T (n < length xs)) : A \elim xs, n
  | nil, 0 => absurd' p
  | cons x _, 0 => x
  | cons _ xs, suc n => lookup xs n p
  \where {
    \func length {A : \Type} (xs : List A) : Nat
      | nil => 0
      | cons _ xs => suc (length xs)

    \func absurd' {A : \Type} (e : Empty) : A
  }

-- 2. Implement function replicate for 'vec' and 'Vec' (this function creates the list of a given length filled with a
-- given element).

\func replicate {A : \Type} (length : Nat) (elem : A) : Vec A length \elim length
  | 0 => fnil
  | suc length => fcons elem (replicate length elem)

-- 3. Implement function 'map' for 'vec' and 'Vec'.

\func map {A B : \Type} {n : Nat} (f : A -> B) (xs : Vec A n) : Vec B n \elim n, xs
  | 0, fnil => fnil
  | suc n, fcons x xs => fcons (f x) (map f xs)

-- 4. Implement function 'zipWith' for 'vec' and 'Vec'.
--    The function must take lists of equal lengths.

\func zipWith {A B : \Type} {n : Nat} (xs : Vec A n) (ys : Vec B n) : Vec (\Sigma A B) n \elim n, xs, ys
  | 0, fnil, fnil => fnil
  | suc n, fcons x xs, fcons y ys => fcons (x, y) (zipWith xs ys)

-- 5. Functions Fin n -> A correspond to lists of length n with elements in A.
--    Implement the function that converts an element of Fin n -> A to element of Vec A n.

\func funToVec {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n -- by unofficial answer
  | 0 => fnil
  | suc _ => fcons (f fzero) (funToVec (\lam x => f (fsuc x)))

-- 6. Define the type of matrices and a number of functions for them:

{-
    +-+-+ \
    | | | n
    +-+-+ /
     \m/
 -}

\func Mat (A : \Type) (n m : Nat) : \Type => Vec (Vec A n) m

\func Mat' (A : \Type) (n m : Nat) : \Type => Fin n -> Fin m -> A -- by unofficial answer

-- diagonal matrix with elements e on the diagonal and z at all other positions.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n \elim n
  | 0 => fnil
  | suc n => fcons (fcons e (zeroVec z n)) (map (fcons z) (diag z e n)) \where {
  \func zeroVec {A : \Type} (z : A) (n : Nat) : Vec A n \elim n
    | 0 => fnil
    | suc n => fcons z (zeroVec z n)
}

\func diag' {A : \Type} (z e : A) (n : Nat) : Mat' A n n => \lam x y => if (x == y) e z \where {
  \func \infix 4 == {n : Nat} (x y : Fin n) : Bool
    | {suc _}, fzero, fzero => true
    | {suc _}, fsuc x, fsuc y => x == y
    | {suc _}, _, _ => false
} -- by unofficial answer

-- transposition

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim n, m, M
  | 0, _, _ => fnil
  | n, 0, fnil => {?}
  | suc n, _, M => fcons (map Head M) (transpose (map Tail M))

\func transpose' {A : \Type} {n m : Nat} (M : Mat' A n m) : Mat' A m n => \lam x y => M y x

-- addition

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m =>
  map (\lam column => map (\lam elem => add elem.1 elem.2) (zipWith column.1 column.2)) (zipWith M N)

\func matAdd' {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat' A n m) : Mat' A n m =>
  \lam x y => add (M x y) (N x y)

-- multiplication

-- z is neutral under addition.

{-    M           N
    +-+-+ \     +-+-+ \     +-+-+ \
    | | | n  X  | | | m  =  | | | n
    +-+-+ /     +-+-+ /     +-+-+ /
     \m/         \k/         \k/
 -}

\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k \elim k, N
  | 0, _ => fnil
  | suc k, fcons N0 N' => fcons (vecMatMul z add mul n m M N0) (matMul z add mul n m k M N')
  \where {
    {-    M          v
        +-+-+ \     +-+ \     +-+ \
        | | | n  X  | | m  =  | | n
        +-+-+ /     +-+ /     +-+ /
         \m/
     -}

    \func vecMatMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m : Nat) (M : Mat A n m) (v : Vec A m) : Vec A n \elim n
      | 0 => fnil
      | suc n => fcons (innerProduct z add mul m (map Head M) v) (vecMatMul z add mul n m (map Tail M) v)

    \func innerProduct {A : \Type} (z : A) (add mul : A -> A -> A) (n : Nat) (ax bx : Vec A n) : A \elim n, ax, bx
      | 0, _, _ => z
      | suc n, fcons a ax, fcons b bx => add (mul a b) (innerProduct z add mul n ax bx)
  }

\func matMul' {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat' A n m) (N : Mat' A m k) : Mat' A n k =>
  \lam x y => innerProduct z add mul (funToVec (M x __)) (funToVec (N __ y)) \where {
  \func innerProduct {A : \Type} (z : A) (add mul : A -> A -> A) {n : Nat} (ax bx : Vec A n) : A \elim n, ax, bx
    | 0, _, _ => z
    | suc n, fcons a ax, fcons b bx => add (mul a b) (innerProduct z add mul ax bx)
}

-- 7. Define the type CTree A n of (complete and full) binary trees of height precisely n, which store elements in internal nodes, but not in leaves.
--    The height of a leaf is 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => cleaf
  | suc n => cnode A (CTree A n) (CTree A n)

-- 8. Define the type Tree A n of binary trees of height at most n, which store elements in internal nodes, but not in leaves.
--    The height of a leaf is 0.

--\data Tree (A : \Type) (n : Nat) \elim n
--  | 0 => leaf
--  | suc n => node A (Maybe (Tree A n)) (Maybe (Tree A n))

\data Tree (A : \Type) (n : Nat) \elim n -- by unofficial answer
  | _ => leaf
  | suc n => node A (Tree A n) (Tree A n)

-- Define the function that computes the height of a tree.

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) -- by unofficial answer
  | _, leaf => fzero
  | suc n, node _ tl tr => max (height n tl) (height n tr)
  \where {
    \func max {n : Nat} (l r : Fin n) : Fin n
      | {suc _}, fzero, r => r
      | {suc _}, l, fzero => l
      | {suc _}, fsuc l, fsuc r => fsuc (max l r)
  }
}
