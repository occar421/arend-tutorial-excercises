-- 1. Define priorities of the functions f1, f2, f3, f4, f5 and f6 so that the function 'test' typechecks.

\func f1 (x y : Nat) => x

\func f2 : Nat => 0

\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0

\func f4 : Nat => 0

\func \infix 2 f5 => f1

\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 2. Define in Arend the function 'if', which takes a boolean value b and two elements of an arbitrary type A
--    and return the first element when b equals to true and the second one otherwise.

\data Bool | true | false

\func if {A : \Type} (b : Bool) (t e : A): A \elim b
  | true => t
  | false => e

-- 3. Define || via 'if'.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 4. Define the power and the factorial functions for natural numbers.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | zero => 1
  | suc y => x Nat.* x ^ y

\func fac (x : Nat) : Nat
  | zero => 1
  | suc x => (suc x) Nat.* fac x

-- 5. Define mod and gcd.

\func mod (x y : Nat) => mod' x x y
  \where {
    \func \infix 4 < (x y : Nat) : Bool
      | 0, 0 => false
      | 0, suc y => true
      | suc x, 0 => false
      | suc x, suc y => x < y

    \func \infixl 6 - (x y : Nat) : Nat
      | 0, _ => 0
      | x, 0 => x
      | suc x, suc y => x - y

    \func mod' (s x y : Nat) : Nat
      | 0, _, _ => 0
      | _, 0, _ => 0
      | _, _, 0 => 0
      | suc s, x, y => if (x < y) x (mod' s (x - y) y)
  }

\func gcd (x y : Nat) => gcd' x x y
  \where
    \func gcd' (s x y : Nat) : Nat
    \elim s,x
      | 0, _ => 0
      | _, 0 => y
      | suc s, x => gcd' s (mod y x) x

-- 6. Define the map function.

\data List (A : \Type) | nil | \infixr 5 :: A (List A)

\func map {A B : \Type} (f : A -> B) (xs : List A) : List B \elim xs
  | nil => nil
  | :: x xs => (f x) :: (map f xs)

-- 7. Define the transpose function.
--    It takes a list of lists considered as a matrix and returns a list of lists which represents the transposed matrix.
--    Example:
--    transpose ((1 :: 2 :: 3 :: nil) :: (4 :: 5 :: 6 :: nil)) == ((1 :: 4 :: nil) :: (2 :: 5 :: nil) :: (3 :: 6 :: nil))

\func transpose {A : \Type} (xs : List (List A)) : List (List A)
  | :: nil _ => nil
  | xs => (map head' xs) ++ (map tail' xs)
  \where {
    \func \infixl 6 ++ {A : \Type} (xs ys : List A) : List A \elim xs
      | nil => ys
      | :: x xs => x :: (xs ++ ys)

    \func head' {T : \Type} (xs : List T) : List T
      | nil => nil
      | :: x _ => x :: nil

    \func tail' {T : \Type} (xs : List T) : List T
      | nil => nil
      | :: _ xs => xs
  }
